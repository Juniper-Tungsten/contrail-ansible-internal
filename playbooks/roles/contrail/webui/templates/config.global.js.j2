/*
 * Copyright (c) 2017 Juniper Networks, Inc. All rights reserved.
 */

var config = {};

config.orchestration = {};
/****************************************************************************
 * Specify Orchestration Model
 * Available models are:
 *  - openstack
 *  - cloudstack
 * If you do not want to specify any model, set it to 'none'
 *
 *****************************************************************************/
{% if cloud_orchestrator == 'openstack' %}
config.orchestration.Manager = 'openstack';
{% else %}
config.orchestration.Manager = 'none';
{% endif %}
/****************************************************************************
 * This boolean flag indicates to communicate with Orchestration
 * modules(networkManager, imageManager, computeManager, identityManager,
 * storageManager), should the webServer communicate using the
 * ip/port/authProtocol/apiVersion as specified in this file, or as returned
 * from auth catalog list.
 * Note: config.identityManager.apiVersion is not controlled by this boolean
 * flag.
 *
 * true  - These values should be taken from this config
 *         file.
 * false - These values should be taken from auth catalog list
 *
 *****************************************************************************/
config.serviceEndPointFromConfig = {{ webui_service_endpoint_from_config | to_json }};

/****************************************************************************
 * This boolean flag specifies wheather region list should be taken from config
 * file or from keystone endpoint
 * true  - If set as true, then keystone endpoint is taken from
 *         config.regions
 * false - If set as false, then keystone endpoint is taken from
 *         config.identityManager
 *
 ****************************************************************************/
config.regionsFromConfig = false;

/****************************************************************************
 * Below are the configs for Api Server and analytics Service type & name as
 * provisioned in keystone
 *
 * apiServiceType - Service Type for apiServer, default value is apiServer
 * opServiceType  - Service Type for analytics, default value is opServer
 *
 * Note: If there are multiple api server or analytices nodes in a specific
 *       region, then provision service type/name as ApiServer0, ApiServer1,
 *       ApiServer2 etc, similarly for analytics node: OpServer0, OpServer1,
 *       OpServer2 etc.
 *
 ****************************************************************************/
config.endpoints = {};
config.endpoints.apiServiceType = 'ApiServer';
config.endpoints.opServiceType = 'OpServer';

{# Number of configurations are only required for openstack #}
{# NOTE: Have to consider situation where ceph is available but no openstack #}
{% if cloud_orchestrator == 'openstack' %}
/****************************************************************************
 * Mapping to region name with keystone endpoint
 *
 * For example:
 * config.regions.RegionOne = 'http://nodeIp:5000/v2.0';
 * config.regions.RegionTwo = 'http://nodeIp:5000/v3';
 *
 ****************************************************************************/
config.regions = {};
config.regions.RegionOne = 'http://127.0.0.1:5000/v2.0';

/****************************************************************************
 * This boolean flag indicates if serviceEndPointFromConfig is set as false,
 * then to take IP/Port/Protocol/Version information from auth catalog,
 * should publicURL OR internalURL will be used.
 *
 * true  - publicURL in endpoint will be used to retrieve IP/Port/Protocol/
 *         Version information
 * false - internalURL in endpoint will be used to retrieve
 *         IP/Port/Protocol/Version information
 *
 * NOTE: if config.serviceEndPointFromConfig is set as true, then this flag
 *       does not have any effect.
 *
 *****************************************************************************/
config.serviceEndPointTakePublicURL = true;

/****************************************************************************
 * Below are the config options for all Orchestration Modules below:
 *  - networkManager
 *  - imageManager
 *  - computeManager
 *  - identityManager
 *  - storageManager
 *  - cnfg
 *  - analytics
 *
 * Options:
 * ip:
 *      IP to connect to for this Server.
 * port:
 *      Port to connect to for this server
 * authProtocol:
 *      Specify authProtocol either 'http' or 'https'
 * apiVersion:
 *      REST API Version for this server to connect to.
 *      Specify a list of Versions in array notation.
 *      Below are the supported list of apiVersion for the modules as of now:
 *      imageManager    -   ['v1', 'v2']
 *      computeManager  -   ['v1.1', 'v2']
 *      identityManager -   ['v2.0']
 *      storageManager  -   ['v1']
 *
 *      Not applicable for cnfg/analytics as of now
 * strictSSL:
 *      If true, requires certificates to be valid
 * ca:
 *      An authority certificate to check the remote host against,
 *      if you do not want to specify then use ''
 *****************************************************************************/
config.networkManager = {};
config.networkManager.ip = '{{ network_manager_ip }}';
config.networkManager.port = '9696'
config.networkManager.authProtocol = '{{ webui_network_manager_auth_protocol }}';
config.networkManager.apiVersion = [];
config.networkManager.strictSSL = false;
config.networkManager.ca = '';

config.imageManager = {};
config.imageManager.ip = '{{ glance_api_ip}}';
config.imageManager.port = '9292';
config.imageManager.authProtocol = '{{ webui_image_manager_auth_protocol }}';
config.imageManager.apiVersion = ['v1', 'v2'];
config.imageManager.strictSSL = false;
config.imageManager.ca = '';

config.computeManager = {};
config.computeManager.ip = '{{ nova_api_ip }}';
config.computeManager.port = '8774';
config.computeManager.authProtocol = '{{ webui_compute_manager_auth_protocol }}';
config.computeManager.apiVersion = ['v1.1', 'v2'];
config.computeManager.strictSSL = false;
config.computeManager.ca = '';

config.identityManager = {};
config.identityManager.ip = '{{ keystone_ip }}';
config.identityManager.port = '{{ keystone_public_port }}';
config.identityManager.authProtocol = '{{ keystone_auth_protocol }}';
/******************************************************************************
 * Note: config.identityManager.apiVersion is not controlled by boolean flag
 * config.serviceEndPointFromConfig. If specified apiVersion here, then these
 * API versions will be used while using REST API to identityManager.
 * If want to use with default apiVersion(v2.0), then can specify it as
 * empty array.
 ******************************************************************************/
config.identityManager.apiVersion = ['v2.0'];
config.identityManager.strictSSL = false;
config.identityManager.ca = '';

config.storageManager = {};
config.storageManager.ip = '127.0.0.1';
config.storageManager.port = '8776';
config.storageManager.authProtocol = 'http';
config.storageManager.apiVersion = ['v1'];
config.storageManager.strictSSL = false;
config.storageManager.ca = '';
{% endif %}

// VNConfig API server and port.
config.cnfg = {};
config.cnfg.server_ip = {{ config_server_list|to_json }};
config.cnfg.server_port = '{{ api_server_port }}';
config.cnfg.authProtocol = '{{ 'https' if api_server_use_ssl else 'http' }}';
{# What is for this strictSSL? #}
config.cnfg.strictSSL = false;
config.cnfg.ca = '';

// Analytics API server and port.
config.analytics = {};
config.analytics.server_ip = {{ contrail_analytics_api_list|to_json }};
config.analytics.server_port = '{{ analytics_server_port }}';
config.analytics.authProtocol = '{{ 'https' if analytics_server_use_ssl else 'http' }}';
{# What is for this strictSSL? #}
config.analytics.strictSSL = false;
config.analytics.ca = '';

//DNS API Server and port.
/* Please note: being introspect port, SSL options for dns should come from
   config.introspect.ssl configuration
 */
config.dns = {};
config.dns.server_ip = {{ control_node_list|to_json }};
config.dns.server_port = '8092';
config.dns.statusURL = "/Snh_PageReq?x=AllEntries%20VdnsServersReq";

{# Only required when vcenter available #}
{# refering fab testbed.py vcenter is a cloud orchestrator is it true? #}
{# I thought vcenter is a compute provider or something need clarification #}
{% if cloud_orchestrator == 'vcenter' %}
// vcenter related parameters
config.vcenter = {};
config.vcenter.server_ip = '127.0.0.1';         //vCenter IP
config.vcenter.server_port = '443';             //Port
config.vcenter.authProtocol = 'https';          //http or https
config.vcenter.datacenter = 'vcenter';          //datacenter name
config.vcenter.dvsswitch = 'vswitch';           //dvsswitch name
config.vcenter.strictSSL = false;               //Validate the certificate or ignore
config.vcenter.ca = '';                         //specify the certificate key file
config.vcenter.wsdl = '/usr/src/contrail/contrail-web-core/webroot/js/vim.wsdl';
{% endif %}

/*****************************************************************************
 * The below configurations descibe the SSL options for connecting to different
 * introspect port.
 *
 * enabled:
 *      Boolean flag to enable or disable ssl while connecting to different
 *      introspect port
 * key:
 *      Private key to use for SSL
 * cert:
 *      Public x509 certificate to use
 * ca:
 *      A string, Buffer or array of strings or Buffers of trusted certificates
 *      in PEM format. These are used to authorize connections.
 * strictSSL:
 *      If true, the server certificate is verified against the list of
 *      supplied CAs
 *****************************************************************************/
config.introspect = {};
config.introspect.ssl = {};
config.introspect.ssl.enabled = {{ 'true' if introspect_ssl_enable else 'false' }};
config.introspect.ssl.key = '{{ sandesh_keyfile }}';
config.introspect.ssl.cert = '{{ sandesh_certfile }}';
config.introspect.ssl.ca = '{{ sandesh_ca_cert }}';
config.introspect.ssl.strictSSL = false;

/* Job Server */
config.jobServer = {};
config.jobServer.server_ip = '127.0.0.1';
config.jobServer.server_port = '3000';

/* Upload/Download Directory */
config.files = {};
config.files.download_path = '/tmp';

/* Cassandra Server */
config.cassandra = {};
config.cassandra.server_ips = {{ configdb_server_list|to_json }};
config.cassandra.server_port = '{{ configdb_cql_port }}';
{# What is for enable_edit? #}
config.cassandra.enable_edit = false;

{# What is this KUE scheduler for? #}
/* KUE Job Scheduler */
config.kue = {};
config.kue.ui_port = '3002'

/* IP List to listen on */
config.webui_addresses = {{ webui_listen_address|to_json }};

/* Is insecure access to WebUI?
 * If set as false, then all http request will be redirected
 * to https, if set true, then no https request will be processed, but only http
 * request
 */
config.insecure_access = {{ 'false' if webui_use_ssl else 'true' }};

// HTTP port for NodeJS Server.
config.http_port = '{{ webui_http_listen_port }}';

// HTTPS port for NodeJS Server.
config.https_port = '{{ webui_https_listen_port }}';

{# What is the relevance of require_auth? #}
// Activate/Deactivate Login.
config.require_auth = false;

/* Number of node worker processes for cluster. */
config.node_worker_count = {{ webui_worker_count }};

/* Number of Parallel Active Jobs with same type */
config.maxActiveJobs = {{ webui_max_active_jobs }};

/* Redis DB index for Web-UI */
config.redisDBIndex = {{ webui_redis_db_index }};

/* WebUI Redis Server */
config.redis_server_port = '{{ redis_server_port }}';
config.redis_server_ip = '{{ redis_server_ip }}';
config.redis_dump_file = '{{ webui_redis_dump_file }}';
config.redis_password = '{{ redis_password }}';

/* Logo File: Use complete path of logo file location */
config.logo_file = '/usr/src/contrail/contrail-web-core/webroot/img/juniper-networks-logo.png';

/* Favicon File: Use complete path of favicon file location */
config.favicon_file = '/usr/src/contrail/contrail-web-core/webroot/img/juniper-networks-favicon.ico';

config.featurePkg = {};
/* Add new feature Package Config details below */
config.featurePkg.webController = {};
config.featurePkg.webController.path = '/usr/src/contrail/contrail-web-controller';
config.featurePkg.webController.enable = true;

config.featurePkg.webStorage = {};
config.featurePkg.webStorage.path = '/usr/src/contrail/contrail-web-storage';
config.featurePkg.webStorage.enable = {{webui_storage_enable | to_json}};

/* Enable/disable Stat Query Links in Sidebar*/
config.qe = {};
config.qe.enable_stat_queries = false;

/* Configure level of logs, supported log levels are:
 debug, info, notice, warning, error, crit, alert, emerg
 */
config.logs = {};
config.logs.level = '{{ webui_log_level }}';

/*****************************************************************************
 * Below are the optional feature list which can be enabled/disabled from
 * UI Menu.
 *
 *****************************************************************************/
config.optFeatureList = {};
config.optFeatureList.mon_infra_underlay = {{ webui_enable_underlay | to_json }};
config.optFeatureList.mon_infra_mx = {{ webui_enable_mx | to_json }};
config.optFeatureList.query_udd_webController = {{ webui_enable_udd | to_json }};

/*****************************************************************************
 *
 * This section describes the various options for server configurations.
 *
 *  key_file:
 *      Private key file path to use for SSL
 *  cert_file:
 *      Public x509 certificate file path to use
 *
 *****************************************************************************/
config.server_options = {};
config.server_options.key_file = '{{ webui_server_options_key_file }}';
config.server_options.cert_file = '{{ webui_server_options_cert_file }}';

/******************************************************************************
 * Boolean flag getDomainProjectsFromApiServer indicates wheather the project
 * list should come from API Server or Identity Manager.
 * If Set
 *      - true, then project list will come from API Server
 *      - false, then project list will come from Identity Manager
 * Default: false
 *
 ******************************************************************************/
config.getDomainProjectsFromApiServer = {{ 'false' if cloud_orchestrator == 'openstack' else 'true' }};
/*****************************************************************************
 * Boolean flag L2_enable indicates the default forwarding-mode of a network.
 * Allowed values : true / false
 * Set this flag to true if all the networks are to be L2 networks,
 * set to false otherwise.
 *****************************************************************************/
config.network = {};
config.network.L2_enable = false;

/******************************************************************************
 * Boolean flag getDomainsFromApiServer indicates wheather the domain
 * list should come from API Server or Identity Manager.
 * If Set
 *      - true, then domain list will come from API Server
 *      - false, then domain list will come from Identity Manager
 * Default: true
 * NOTE: if config.identityManager.apiVersion is set as v2.0, then this flag
 *       does not have any effect, in that case the domain list is retrieved
 *       from API Server.
 *
 *****************************************************************************/
config.getDomainsFromApiServer = {{ 'false' if cloud_orchestrator == 'openstack' else 'true' }};

// Export this as a module.
module.exports = config;

{% if cloud_orchestrator != 'openstack' or api_aaa_mode == 'no-auth' %}
config.multi_tenancy = {};
config.multi_tenancy.enabled = false;
{% endif %}
